using System.Threading.Tasks;
using Lackluster.Elements;

namespace Lackluster.Infrastructure
{
    public abstract class Component : BaseObject
    {
        /// TODO: Autogenerate these protected virtual helpers from all files in the Elements folder. Use a partial class for autogenerated code.

        protected virtual Html Html(params BaseObject[] children)
        {
            return new Html(null, null, null, children);
        }

        protected virtual Element Div(params BaseObject[] children)
        {
            return new Div(null, null, null, children);
        }

        protected virtual Element Head(params BaseObject[] children)
        {
            return new Head(null, null, null, children);
        }

        protected virtual Element Body(params BaseObject[] children)
        {
            return new Body(null, null, null, children);
        }
        protected virtual Element Section(params BaseObject[] children)
        {
            return new Section(null, null, null, children);
        }

        protected virtual Element P(params BaseObject[] children)
        {
            return new Paragraph(null, null, null, children);
        }

        protected virtual Element P(string text)
        {
            return new Paragraph(children: new Text(text));
        }

        protected virtual Element Link(string relType, string href)
        {
            return new Link(relType, href);
        }

        protected virtual Element Meta(string name, string content)
        {
            return new Meta(name, content);
        }

        protected virtual Element Article(params BaseObject[] children)
        {
            return new Article(null, null, null, children);
        }

        protected virtual Element A(params BaseObject[] children)
        {
            return new Anchor(null, null, null, children);
        }

        protected virtual Element A(string text, string href)
        {
            return new Anchor(children: new Text(text)).Attribute("href", href);
        }

        protected virtual Element H1(params BaseObject[] children)
        {
            return new H1(null, null, null, children);
        }

        protected virtual Element H1(string text)
        {
            return new H1(null, null, null, new Text(text));
        }

        protected virtual Element H2(params BaseObject[] children)
        {
            return new H2(null, null, null, children);
        }

        protected virtual Element H2(string text)
        {
            return new H2(null, null, null, new Text(text));
        }

        protected virtual Element H3(params BaseObject[] children)
        {
            return new H3(null, null, null, children);
        }

        protected virtual Element H3(string text)
        {
            return new H3(null, null, null, new Text(text));
        }

        protected virtual Element H4(params BaseObject[] children)
        {
            return new H4(null, null, null, children);
        }

        protected virtual Element H4(string text)
        {
            return new H4(null, null, null, new Text(text));
        }

        protected virtual Element H5(params BaseObject[] children)
        {
            return new H5(null, null, null, children);
        }

        protected virtual Element H5(string text)
        {
            return new H5(null, null, null, new Text(text));
        }

        protected virtual Element H6(params BaseObject[] children)
        {
            return new H6(null, null, null, children);
        }

        protected virtual Element H6(string text)
        {
            return new H6(null, null, null, new Text(text));
        }

        protected virtual Element Small(params BaseObject[] children)
        {
            return new Small(null, null, null, children);
        }

        protected virtual Element Small(string text)
        {
            return new Small(null, null, null, new Text(text));
        }

        protected virtual Element Text(string text)
        {
            return new Text(text);
        }

        /// <summary>
        /// Renders the component to static HTML.
        /// </summary>
        public override async Task<string> RenderToStaticMarkup()
        {
            // Because all components implement this method, we just
            // need to call Render once and let the element render
            // itself. No need for tree traversal.
            var child = await Render();

            return await child.RenderToStaticMarkup();
        }

        public abstract Task<BaseObject> Render();
    }
}