using System;
using Microsoft.Extensions.CommandLineUtils;
using Lackluster.Infrastructure;
using Lackluster.Elements;
using System.Reflection;
using System.Linq;
using Lackluster.Attributes;
using Microsoft.Extensions.DependencyModel;
using System.Collections.Generic;
using System.Text;

namespace Utils
{
    class Program
    {
        static void Main(string[] args)
        {
            var app = new CommandLineApplication();
            app.Name = "Lackluster Utils";
            app.Description = "Utilities for building Lackluster.";
            app.HelpOption("-?|-h|--help");

            app.Command("elements", (config) =>
            {
                CommandOption skipWrite = config.Option("-s|--skip-write", "Skips writing the output to Lackluster/Infrastructure/Component.Helpers.cs file.", CommandOptionType.NoValue);

                config.OnExecute(() =>
                {
                    // Get all of the classes in the Lackluster.Elements namespace
                    string ns = nameof(Lackluster);
                    string elementsNs = $"{ns}.{nameof(Lackluster.Elements)}";
                    string infraNs = $"{ns}.{nameof(Lackluster.Infrastructure)}";
                    var lackluster = DependencyContext.Default
                        .GetDefaultAssemblyNames()
                        .Where(name => name.Name == "Lackluster")
                        .First();
                    var assembly = Assembly.Load(lackluster);
                    var elements = assembly
                        .GetTypes()
                        .Where(t => t.Namespace == elementsNs && t.GetTypeInfo().IsClass);

                    if (elements.Count() == 0)
                    {
                        Console.WriteLine($"Element list is empty, no class could be found in namespace {elementsNs}.");

                        return 0;
                    }

                    StringBuilder sb = new StringBuilder();
                    string nl = Environment.NewLine;
                    string tab = "\t";
                    string returnSuffix = $");";

                    sb.AppendLine("/// <auto-generated>");
                    sb.AppendLine($"/// This code was auto-generated by Lackluster command line utils on {DateTime.UtcNow} UTC. Do not manually edit this file.");
                    sb.AppendLine("/// </auto-generated>");
                    sb.AppendLine($"using {elementsNs};");
                    sb.Append(nl);
                    sb.AppendLine($"namespace {infraNs}");
                    sb.AppendLine("{");
                    sb.AppendLine(tab + $"public abstract partial class {nameof(Component)} : {nameof(BaseObject)}");
                    sb.Append(tab + "{");

                    // Append compiled helpers
                    foreach (var element in elements)
                    {
                        TypeInfo info = element.GetTypeInfo();
                        string elementName = info.Name;
                        string helperName = GetHelperName(info);
                        string signature = $"protected virtual {elementName} {helperName}";

                        var constructorsWithHelpers = info.GetConstructors()
                            .Where(constructor => constructor.CustomAttributes
                                .Any(att => att.AttributeType == typeof(HelperAttribute)));

                        foreach (var constructor in constructorsWithHelpers)
                        {
                            var att = (HelperAttribute) constructor.GetCustomAttribute(typeof(HelperAttribute));

                            List<string> constructorParams = new List<string>();
                            List<string> argNames = new List<string>();

                            foreach (var constructorParam in constructor.GetParameters())
                            {
                                Type paramType = constructorParam.ParameterType;
                                string paramTypeName = paramType.FullName;
                                bool isParamsArray = constructorParam.CustomAttributes.Any(paramAtt => paramAtt.AttributeType == typeof(ParamArrayAttribute));
                                string prefix = isParamsArray ? "params " : string.Empty;
                                string suffix = GetDefaultValueSuffix(constructorParam);

                                if (paramType.GenericTypeArguments.Count() > 0)
                                {
                                    // The parameter name will have a backtick at the end to indicate how many generic arguments there are:
                                    // System.Collections.IEnumerable`1
                                    // Remove the backtick and append the generic arguments.
                                    string withoutTick = paramTypeName.Substring(0, paramTypeName.IndexOf("`"));
                                    paramTypeName = $"{withoutTick}<{string.Join(", ", paramType.GenericTypeArguments.Select(arg => arg.FullName))}>";
                                }

                                constructorParams.Add($"{prefix}{paramTypeName} {constructorParam.Name}{suffix}");
                                argNames.Add(constructorParam.Name);
                            }

                            string fullConstructor = string.Join(", ", constructorParams);

                            sb.Append(tab + nl);
                            sb.AppendLine(tab + tab + $"{signature}({fullConstructor})");
                            sb.AppendLine(tab + tab + "{");
                            sb.AppendLine(tab + tab + tab + $"return new {elementName}({string.Join(", ", argNames)});");
                            sb.AppendLine(tab + tab + "}");
                        }
                    }

                    sb.AppendLine(tab + "}");
                    sb.Append("}");

                    string output = sb.ToString();
                    
                    Console.WriteLine(output);

                    if (skipWrite.HasValue())
                    {
                        Console.WriteLine($"{skipWrite.Template} flag was detected. Will not write output to Lackluster project.");
                    }
                    else
                    {
                        System.IO.File.WriteAllText("../Lackluster/Infrastructure/Component.Helpers.cs", output);
                    }
                    
                    return 0;
                });
            });

            app.OnExecute(() =>
            {
                app.ShowHelp();

                return 0;
            });

            app.Execute(args);
        }

        static string GetHelperName(TypeInfo elementInfo)
        {
            var att = elementInfo.GetCustomAttribute(typeof(ElementShortNameAttribute)) as ElementShortNameAttribute;

            return att?.ShortName ?? elementInfo.Name;
        }

        static string GetDefaultValueSuffix(ParameterInfo paramInfo)
        {
            if (! paramInfo.HasDefaultValue)
            {
                return string.Empty;
            }

            Object value = paramInfo.DefaultValue;
            
            return " = " + (value?.ToString() ?? "null");
        }
    }
}
