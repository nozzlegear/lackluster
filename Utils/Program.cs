using System;
using Microsoft.Extensions.CommandLineUtils;
using Lackluster.Infrastructure;
using Lackluster.Elements;
using System.Reflection;
using System.Linq;
using Lackluster.Attributes;
using Microsoft.Extensions.DependencyModel;
using System.Collections.Generic;
using System.Text;

namespace Utils
{
    class Program
    {
        static void Main(string[] args)
        {
            var app = new CommandLineApplication();
            app.Name = "Lackluster Utils";
            app.Description = "Utilities for building Lackluster.";
            app.HelpOption("-?|-h|--help");

            app.Command("elements", (config) =>
            {
                // Get all of the classes in the Lackluster.Elements namespace that implement the ComponentHelper attribute.
                string ns = nameof(Lackluster);
                string elementsNs = $"{ns}.{nameof(Lackluster.Elements)}";
                string infraNs = $"{ns}.{nameof(Lackluster.Infrastructure)}";
                var lackluster = DependencyContext.Default
                    .GetDefaultAssemblyNames()
                    .Where(name => name.Name == "Lackluster")
                    .First();
                var assembly = Assembly.Load(lackluster);
                var types = assembly
                    .GetTypes()
                    .Where(t => t.Namespace == elementsNs)
                    .Select(t => new { type = t, attribute = t.GetTypeInfo().GetCustomAttribute(typeof(ComponentHelper)) as ComponentHelper })
                    .Where(t => t.attribute != null);

                if (types.Count() == 0)
                {
                    Console.WriteLine($"Types list is empty, no type could be found in namespace {elementsNs} that used attribute {nameof(ComponentHelper)}.");

                    return;
                }

                StringBuilder sb = new StringBuilder();
                string childType = nameof(BaseObject);
                string nl = Environment.NewLine;
                string tab = "\t";
                string returnSuffix = $");";

                sb.AppendLine("/// <auto-generated>");
                sb.AppendLine($"/// This code was auto-generated by Lackluster command line utils on {DateTime.UtcNow} UTC. Do not manually edit this file.");
                sb.AppendLine("/// </auto-generated>");
                sb.AppendLine($"using {elementsNs};");
                sb.Append(nl);
                sb.AppendLine($"namespace {infraNs}");
                sb.AppendLine("{");
                sb.AppendLine(tab + $"public abstract partial class {nameof(Component)} : {nameof(BaseObject)}");
                sb.Append(tab + "{");

                // Append compiled helpers
                foreach (var type in types)
                {
                    ComponentHelper attribute = type.attribute;
                    string name = type.type.Name;
                    string signature = $"protected virtual {name} {name}";
                    string returnPrefix = $"return new {name}(null, null, null, ";

                    sb.Append(tab + nl);
                    sb.AppendLine(tab + tab + $"{signature}(params {childType}[] children)");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + $"{returnPrefix}children{returnSuffix}");
                    sb.AppendLine(tab + tab + "}");

                    if (! attribute.HasTextChild)
                    {
                        continue;
                    }

                    sb.Append(nl);
                    sb.AppendLine(tab + tab + $"{signature}(string text)");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + $"{returnPrefix}new {nameof(Text)}(text){returnSuffix}");
                    sb.AppendLine(tab + tab + "}");
                }

                sb.AppendLine(tab + "}");
                sb.Append("}");


                string output = sb.ToString();
                
                System.IO.File.WriteAllText("../Lackluster/Infrastructure/Component.Helpers.cs", output);
                Console.WriteLine(output);
            });

            app.OnExecute(() =>
            {
                app.ShowHelp();

                return 0;
            });

            app.Execute(args);
        }
    }
}
